export declare const PACKAGE_GROUP_NAME = "@morpheus";
export declare const EDUCATION_APP_ID = "mcore.edu.*";
export declare const LICENSE_FILE_NAME = "mcore.mobile.lic";
export declare const LICENSE_DIR = "license";
export declare const EDU_LICENSE_DIR = "edu_license";
export declare const EDUCATION_LICENSE: License;
export declare enum ANDROID_CPU {
    ARM64_V8A = "arm64-v8a",
    ARMEABI_V7A = "armeabi-v7a",
    ARMEABI = "armeabi",
    X86 = "x86",
    X86_64 = "x86_64"
}
export declare enum OS {
    Unknown = "unknown",
    Mac = "mac",
    Windows = "windows",
    Linux = "linux"
}
export type SuperAgentRequest = import('superagent').SuperAgentRequest;
export type SuperAgentResponse = import('superagent').Response;
export interface SuperAgentError extends Error {
    response: import('superagent').Response;
}
export interface PackageJson {
    readonly name: string;
    readonly version: string;
    readonly dependencies?: {
        readonly [key: string]: string | undefined;
    };
    readonly devDependencies?: {
        readonly [key: string]: string | undefined;
    };
}
export interface ProjectPackageJson {
    name: string;
    version: string;
    engines?: {
        node: string;
    };
    dependencies?: {
        [key: string]: string | undefined;
    };
    devDependencies?: {
        [key: string]: string | undefined;
    };
    scripts?: {
        [key: string]: string | undefined;
    };
}
export interface MorpheusPackageJson extends ProjectPackageJson {
    morpheus: {
        interface?: string;
    };
}
export type TemplateConfigByAll = {
    mode: 'all';
} & Omit<TemplateConfigByGitea, 'mode'> & Omit<TemplateConfigByNpm, 'mode'>;
export interface TemplateConfigByGitea {
    mode: 'gitea';
    giteaBaseUrl: string;
    giteaTemplateOrg: string;
}
export interface TemplateConfigByNpm {
    mode: 'npm';
    npmRegistryUrl: string;
    npmPackageScope: string;
}
export interface GlobalCliConfig {
    npmClient: string;
    npmRegistryUrl: string;
    template: TemplateConfigByGitea | TemplateConfigByNpm | TemplateConfigByAll;
    disabledTLSCerts?: boolean;
}
export interface CliConfig extends GlobalCliConfig {
    readonly rootDir: string;
    readonly embedDir: string;
    readonly dataDir: string;
    readonly os: OS;
    readonly package: PackageJson;
}
export interface ExtConfig {
    projectName: string;
    applicationId: string;
    androidAppName: string;
    androidPackageName: string;
    iosAppName?: string;
    iosBundleId?: string;
    webRootDir?: string;
    androidRootDir?: string;
    iosRootDir?: string;
    legacyJsOutPut?: string;
    manifestExt?: string;
}
export interface AndroidConfig {
    readonly rootDir: string;
    readonly appName: string;
    readonly packageName: string;
    readonly cpus: ANDROID_CPU[];
}
export interface IosConfig {
    readonly appName: string;
    readonly bundleId: string;
    readonly rootDir: string;
    readonly pbxprojPath: string;
}
export interface AppConfig {
    readonly projectName: string;
    readonly appId: string;
    readonly rootDir: string;
    readonly assetsDir: string;
    readonly manifest: string;
    readonly package: PackageJson;
    readonly manifestExt: string;
}
export interface WebConfig {
    readonly rootDir: string;
    readonly output: string;
}
export interface Config {
    cli: CliConfig;
    app: AppConfig;
    android: AndroidConfig;
    web: WebConfig;
    ios?: IosConfig;
}
export interface License {
    appId: string;
    packageName: string;
    bundleId: string;
    expirationDate: string;
}
export interface AndroidAppIcon {
    density: string;
    imgPath: string;
}
export interface LibraryMeta {
    name: string;
    description: string;
    history: string;
    version: string;
}
export interface NexusSearch<T> {
    items: T[];
    continuationToken: null | string;
}
type NEXUS_REPOSITORY_FORMATS = 'npm';
export interface NexusSearchItem {
    id: string;
    repository: string;
    format: NEXUS_REPOSITORY_FORMATS;
    group: string;
    name: string;
    version: string;
    assets: NexusAsset[];
}
export interface NexusSearchNpmItem extends NexusSearchItem {
    format: 'npm';
    assets: NexusNpmAsset[];
}
export interface NexusAsset {
    downloadUrl: string;
    path: string;
    id: string;
    repository: string;
    format: string;
    checksum: any;
    contentType: string;
    lastModified: string;
    lastDownloaded: string;
    uploader: string;
    uploaderIp: string;
    fileSize: number;
}
export interface NpmAsset {
    name: string;
    version: string;
}
export interface NexusNpmAsset extends NexusAsset {
    npm: NpmAsset;
}
export interface NexusNodeSearchRes {
    tid: 1;
    action: 'coreui_Browse';
    method: 'read';
    type: 'rpc';
    result: {
        success: true;
        data: NexusNode[];
    };
}
export interface NexusNode {
    id: string;
    text: string;
    type: 'asset';
    leaf: boolean;
    componentId: null | string;
    assetId: string;
    packageUrl: null | string;
}
export interface GiteaOwner {
    id: number;
    login: string;
    login_name: string;
    full_name: string;
    username: string;
}
export interface GiteaRepository {
    id: number;
    owner: GiteaOwner;
    name: string;
    full_name: string;
    description: string;
    empty: boolean;
    private: boolean;
    fork: boolean;
    template: boolean;
    mirror: boolean;
    html_url: string;
    link: string;
    ssh_url: string;
    clone_url: string;
    original_url: string;
    release_counter: number;
    default_branch: string;
    archived: boolean;
    permissions: {
        admin: boolean;
        push: boolean;
        pull: boolean;
    };
}
export interface GiteaRelease {
    id: number;
    tag_name: string;
    target_commitish: string;
    name: string;
    body: string;
    url: string;
    html_url: string;
    tarball_url: string;
    zipball_url: string;
    draft: boolean;
    prerelease: boolean;
    created_at: string;
    published_at: string;
    author: GiteaOwner;
    assets: [];
}
interface NpmPackageAsset {
    name: string;
    version: string;
    keywords: string[];
    author: Record<string, string>;
    license: string;
    maintainers: Record<string, string>[];
    homepage: string;
    bugs: Record<string, string>[];
    dist: {
        shasum: string;
        tarball: string;
        fileCount: number;
        integrity: string;
        signatures: Record<string, string>[];
        unpackedSize: number;
    };
    main: string;
    type: string;
    types: string;
    exports: Record<string, any>;
    gitHead: string;
    scripts: Record<string, string>;
    repository: Record<string, string>;
    description: string;
    directories: Record<string, string>;
    readme: string;
    devDependencies: Record<string, string>;
}
export interface NpmPackage {
    name: string;
    'dist-tags': Record<string | 'latest', string>;
    versions: Record<string, NpmPackageAsset>;
    time: Record<string, string>;
    bugs: Record<string, string>;
    author: Record<string, string>;
    license: string;
    homepage: string;
    keywords: string[];
    repository: Record<string, string>;
    description: string;
    maintainers: Record<string, string>[];
    readme: string;
    readmeFilename: string;
}
export interface NpmSearchPackage {
    objects: {
        score: {
            detail: {
                quality: number;
                popularity: number;
                maintenance: number;
            };
            final: number;
        };
        searchScore: number;
        package: {
            name: string;
            version: string;
            description: string;
            keywords: string[];
            date: string;
            links: Record<string | 'npm' | 'homepage' | 'repository', string>;
            publisher: Record<string, string>;
            maintainers: Record<string, string>[];
        };
    }[];
    total: number;
    time: string;
}
export interface TemplateMeta {
    name: string;
    description: string;
    provider: 'npm' | 'gitea';
}
export {};
