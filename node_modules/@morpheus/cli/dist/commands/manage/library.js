"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@oclif/core");
const definition_1 = require("../../definition");
const errors_1 = require("../../errors");
const network_1 = require("../../lib/utils/network");
const package_1 = require("../../lib/package");
const subprocess_1 = require("../../lib/utils/subprocess");
class ManageLibrary extends core_1.Command {
    async run() {
        const { flags } = await this.parse(ManageLibrary);
        /**
         * 최신 라이브러리 조회
         */
        let config;
        let latestLibraries = [];
        const { loadConfig } = await Promise.resolve().then(() => require('../../lib/config'));
        try {
            config = await loadConfig();
        }
        catch (error) {
            // exit!
            this.error(error);
        }
        const { loadLibraries, loadInstalledLibrary, applyAndroidLibrary, applyIosLibrary, applyLegacyWebLibrary, syncLibraryManifest } = await Promise.resolve().then(() => require('../../lib/library'));
        try {
            await (0, network_1.checkInternetConnectivity)(config.cli);
            latestLibraries = await loadLibraries(config.cli);
        }
        catch (err) {
            // 불러오지 못하는 경우에 대한 경고 문구만 출력
            this.warn(err);
        }
        try {
            if (flags.json) {
                const installDependencies = JSON.parse(flags.json);
                const dependencies = { ...config.app.package.dependencies };
                Object.keys(dependencies)
                    // eslint-disable-next-line unicorn/no-array-for-each
                    .forEach((dep) => {
                    if (dep !== `${definition_1.PACKAGE_GROUP_NAME}/cli` && dep.includes(definition_1.PACKAGE_GROUP_NAME)) {
                        delete dependencies[dep];
                    }
                });
                await (0, package_1.writeProjectPackageJson)(config, {
                    ...config.app.package,
                    dependencies: {
                        ...dependencies,
                        ...installDependencies,
                    },
                });
            }
        }
        catch (err) {
            this.error(err);
        }
        try {
            const installedLibraries = await (await loadInstalledLibrary(config)).map(({ name, packageJson }) => ({
                name,
                packageJson,
                version: packageJson.version,
            }));
            const result = latestLibraries.map((value) => {
                const installed = installedLibraries.find((lib) => value.name === `${definition_1.PACKAGE_GROUP_NAME}/${lib.name}`);
                let apply = true;
                if (installed && installed.packageJson) {
                    apply = value.version > installed.packageJson.version;
                }
                return {
                    fullname: value.name,
                    name: value.name.split('/')[1],
                    version: {
                        current: installed ? installed.version : null,
                        latest: value.version,
                    },
                    can: {
                        apply,
                        remove: !!installed,
                    },
                };
            });
            if (flags.log) {
                this.logJson(result);
            }
            else {
                const installCmd = new subprocess_1.Subprocess(config.cli.npmClient, ['install'], { stdio: 'inherit', cwd: config.app.rootDir });
                await installCmd.run();
                const newConfig = await loadConfig();
                await applyAndroidLibrary(newConfig);
                await applyIosLibrary(newConfig);
                await applyLegacyWebLibrary(newConfig);
                await syncLibraryManifest(newConfig);
            }
        }
        catch (err) {
            if (err instanceof errors_1.NetworkException) {
                this.warn(`인터넷 상태 또는 방화벽을 확인해주세요.`);
            }
            this.error(err);
        }
    }
}
exports.default = ManageLibrary;
ManageLibrary.description = '모피어스 프로젝트 라이브러리 관리';
ManageLibrary.examples = ['<%= config.bin %> <%= command.id %>'];
ManageLibrary.flags = {
    // flag with no value (-f, --force)
    log: core_1.Flags.boolean({ char: 'l', description: 'show log' }),
    json: core_1.Flags.string({ char: 'j', description: 'Libraries in JSON format', hidden: true }),
};
ManageLibrary.args = {
// file: Args.string({ description: 'file to read' }),
};
