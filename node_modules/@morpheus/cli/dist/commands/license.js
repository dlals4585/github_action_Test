"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@oclif/core");
const definition_1 = require("../definition");
class License extends core_1.Command {
    async getLicenseByAppId(appId, config) {
        const { getLicenseByAppId } = await Promise.resolve().then(() => require('../lib/license'));
        const license = await getLicenseByAppId(config.cli, appId);
        return { license, cpus: Object.values(definition_1.ANDROID_CPU) };
    }
    async choiceLicense(config) {
        const { choiceAppLicense, choiceAndroidCpus } = await Promise.resolve().then(() => require('../lib/license'));
        const license = await choiceAppLicense(config.cli, config.app.appId);
        const cpus = await choiceAndroidCpus(config.android.cpus);
        return { license, cpus };
    }
    async run() {
        try {
            const { args: { appId }, } = await this.parse(License);
            const { loadConfig, writeExtConfig, loadExtConfig } = await Promise.resolve().then(() => require('../lib/config'));
            const { applyAndroidLicense, applyWebLicense, applyIosLicense } = await Promise.resolve().then(() => require('../lib/license'));
            const config = await loadConfig();
            const { license, cpus } = appId ? await this.getLicenseByAppId(appId, config) : await this.choiceLicense(config);
            await applyAndroidLicense(cpus, config.android.rootDir, license, config.cli, config.android.packageName);
            await applyWebLicense(config.app.assetsDir, license, config.cli);
            if (config.ios) {
                await applyIosLicense(config.ios.rootDir, license, config.cli, config.ios.bundleId);
            }
            await writeExtConfig({
                ...(await loadExtConfig(config.app.rootDir)),
                androidPackageName: license.packageName,
                ...(config.ios ? { iosBundleId: license.bundleId } : {}),
                applicationId: license.appId,
            }, config.app.rootDir);
        }
        catch (e) {
            this.error(e);
        }
    }
}
exports.default = License;
License.description = '프로젝트 라이선스 관리';
License.examples = ['<%= config.bin %> <%= command.id %>'];
License.flags = {};
License.args = {
    appId: core_1.Args.string({ description: 'license appId' }),
};
