"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.promptProjectName = exports.promptAppName = exports.promptEduAppPackage = exports.singleChoice = exports.multiChoice = exports.confirm = void 0;
const inquirer_1 = require("inquirer");
const definition_1 = require("../definition");
async function confirm(message) {
    const { confirm } = await (0, inquirer_1.prompt)({
        type: 'confirm',
        name: 'confirm',
        message,
    });
    return confirm;
}
exports.confirm = confirm;
async function multiChoice(message, options, required = true) {
    const { choices } = await (0, inquirer_1.prompt)({
        type: 'checkbox',
        name: 'choices',
        message,
        choices: options.map((item) => {
            if (typeof item === 'string') {
                return new inquirer_1.Separator(item);
            }
            if (typeof item.value === 'object' && typeof item.value.name === 'string') {
                return {
                    ...item,
                    value: {
                        ...item.value,
                        __name: item.value.name,
                        name: item.name,
                    },
                };
            }
            return item;
        }),
        validate: required ? (input) => input.length > 0 : undefined,
    });
    return choices.map((item) => {
        if (typeof item === 'object') {
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            const { name, __name, ...others } = item;
            return typeof __name === 'undefined' ? { ...others } : { ...others, name: __name };
        }
        return item;
    });
}
exports.multiChoice = multiChoice;
async function singleChoice(message, options, required) {
    const { choice } = await (0, inquirer_1.prompt)({
        type: 'list',
        name: 'choice',
        message,
        choices: options.map((item) => (typeof item === 'string' ? new inquirer_1.Separator(item) : item)),
        validate: required ? (input) => Boolean(input) : undefined,
    });
    return choice;
}
exports.singleChoice = singleChoice;
async function promptEduAppPackage() {
    const { subfix } = await (0, inquirer_1.prompt)({
        type: 'input',
        name: 'subfix',
        message: 'edu.mcore.[입력값]',
        validate: (input) => {
            // eslint-disable-next-line unicorn/better-regex
            return /^[a-z][a-z0-9_]*(\.[a-z0-9_]+)+[0-9a-z_]$/i.test(definition_1.EDUCATION_APP_ID.replace('*', input))
                ? true
                : '유효하지 않은 패키지명입니다.';
        },
    });
    return {
        ...definition_1.EDUCATION_LICENSE,
        packageName: definition_1.EDUCATION_APP_ID.replace('*', subfix),
        bundleId: definition_1.EDUCATION_APP_ID.replace('*', subfix),
    };
}
exports.promptEduAppPackage = promptEduAppPackage;
async function promptAppName() {
    const { appName } = await (0, inquirer_1.prompt)({
        type: 'input',
        name: 'appName',
        message: '앱이름을 입력해주세요.',
        validate: (input) => {
            return input.trim() ? true : '앱이름은 필수 입력입니다.';
        },
    });
    return appName;
}
exports.promptAppName = promptAppName;
async function promptProjectName() {
    const { input } = await (0, inquirer_1.prompt)({
        type: 'input',
        name: 'input',
        message: '앱이름을 입력해주세요.',
    });
    return input;
}
exports.promptProjectName = promptProjectName;
