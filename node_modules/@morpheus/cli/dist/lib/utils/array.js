"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.reduce = exports.map = exports.concurrentFilter = void 0;
async function concurrentFilter(array, callback) {
    const mapper = async (v) => [v, await callback(v)];
    // eslint-disable-next-line unicorn/no-array-callback-reference
    const mapped = await Promise.all(array.map(mapper));
    return mapped.filter(([, f]) => f).map(([v]) => v);
}
exports.concurrentFilter = concurrentFilter;
async function map(array, callback) {
    const initial = [];
    return reduce(array, async (acc, v, i, arr) => {
        acc.push(await callback(v, i, arr));
        return acc;
    }, initial);
}
exports.map = map;
async function reduce(array, callback, initialValue) {
    const hadInitialValue = typeof initialValue === 'undefined';
    const startingIndex = hadInitialValue ? 1 : 0;
    if (typeof initialValue === 'undefined') {
        if (array.length === 0) {
            throw new TypeError('Reduce of empty array with no initial value');
        }
        initialValue = array[0];
    }
    let value = initialValue;
    for (let i = startingIndex; i < array.length; i++) {
        const v = await callback(value, array[i], i, array);
        value = v;
    }
    return value;
}
exports.reduce = reduce;
