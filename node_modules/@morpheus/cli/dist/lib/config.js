"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.provideDefaultGlobalCliConfig = exports.writeGlobalCliConfig = exports.loadGlobalCliConfig = exports.loadExtConfig = exports.writeExtConfig = exports.loadCliConfig = exports.loadConfig = exports.defaultAssetsDir = exports.defaultIosRoot = exports.defaultAndroidRoot = exports.GLOBAL_CLI_CONFIG_PATH = exports.GLOBAL_CLI_DATA_PATH = exports.DEFAULT_GITEA_TEMPLATE_ORG = exports.DEFAULT_GITEA_URL = exports.DEFAULT_NPM_REGISTRY_URL = exports.CONFIG_FILE_NAME_JSON = void 0;
const fs_1 = require("./utils/fs");
const path = require("node:path");
const os = require("node:os");
const debug_1 = require("debug");
const definition_1 = require("../definition");
const errors_1 = require("../errors");
const license_1 = require("./license");
// import { isExtConfig } from '../guards'
const debug = (0, debug_1.default)('morpheus:config');
exports.CONFIG_FILE_NAME_JSON = 'morpheus.config.json';
exports.DEFAULT_NPM_REGISTRY_URL = 'https://nexus.dev.morpheus.kr/repository/npm';
exports.DEFAULT_GITEA_URL = 'https://gitea.dev.morpheus.kr/api/v1';
exports.DEFAULT_GITEA_TEMPLATE_ORG = 'morpheus-client';
exports.GLOBAL_CLI_DATA_PATH = path.join(os.homedir(), '.morpheus');
exports.GLOBAL_CLI_CONFIG_PATH = path.join(exports.GLOBAL_CLI_DATA_PATH, 'config.json');
function defaultAndroidRoot(appRootDir) {
    return path.join(appRootDir, 'android', 'app');
}
exports.defaultAndroidRoot = defaultAndroidRoot;
function defaultIosRoot(appRootDir) {
    return path.join(appRootDir, 'ios', 'project');
}
exports.defaultIosRoot = defaultIosRoot;
function defaultAssetsDir(appRootDir) {
    return path.join(appRootDir, 'assets');
}
exports.defaultAssetsDir = defaultAssetsDir;
async function loadConfig() {
    const appRootDir = process.cwd();
    const cli = await loadCliConfig();
    const conf = await loadExtConfig(appRootDir);
    const app = await loadAppConfig(appRootDir, conf);
    const webRootDir = conf.webRootDir
        ? path.join(appRootDir, conf.webRootDir) // 별도의 웹프로젝트로 하는 경우
        : appRootDir; // 기본
    const androidRootDir = conf.androidRootDir ? path.join(appRootDir, conf.androidRootDir) : defaultAndroidRoot(appRootDir);
    const iosRootDir = conf.iosRootDir ? path.join(appRootDir, conf.iosRootDir) : defaultIosRoot(appRootDir);
    const existIosDir = (0, fs_1.pathExistsSync)(iosRootDir);
    const pbxprojPath = path.join(iosRootDir, `${conf.projectName}.xcodeproj`, 'project.pbxproj');
    const output = conf.legacyJsOutPut
        ? path.join(appRootDir, conf.legacyJsOutPut) // 별도의 웹프로젝트를 사용하는 경우
        : path.join(app.assetsDir, 'res', 'www', 'js'); // 기본
    const cpus = await (0, license_1.loadAndroidCpus)(androidRootDir);
    const config = {
        cli,
        web: {
            rootDir: webRootDir,
            output,
        },
        app,
        android: {
            rootDir: androidRootDir,
            appName: conf.androidAppName,
            // cpus: conf.androidCpus,
            cpus,
            packageName: conf.androidPackageName,
        },
    };
    if (existIosDir && conf.iosAppName && conf.iosBundleId) {
        config.ios = {
            appName: conf.iosAppName,
            bundleId: conf.iosBundleId,
            rootDir: iosRootDir,
            pbxprojPath,
        };
    }
    debug('config : %o', config);
    return config;
}
exports.loadConfig = loadConfig;
async function loadCliConfig() {
    // eslint-disable-next-line unicorn/prefer-module
    const rootDir = path.join(__dirname, '..', '..');
    return {
        rootDir,
        dataDir: exports.GLOBAL_CLI_DATA_PATH,
        embedDir: path.join(rootDir, 'embed'),
        os: determineOS(process.platform),
        package: await (0, fs_1.readJSON)(path.join(rootDir, 'package.json')),
        ...(await loadGlobalCliConfig()),
    };
}
exports.loadCliConfig = loadCliConfig;
async function writeExtConfig(extConfig, appRootDir) {
    await (0, fs_1.writeFile)(path.join(appRootDir, exports.CONFIG_FILE_NAME_JSON), JSON.stringify(extConfig, null, 2), { encoding: 'utf-8' });
}
exports.writeExtConfig = writeExtConfig;
// 확장 가능한 설정 파일 구성시 사용.
async function loadExtConfig(rootDir) {
    try {
        const extConfig = await (0, fs_1.readJSON)(path.join(rootDir, exports.CONFIG_FILE_NAME_JSON));
        // if (!isExtConfig(extConfig)) throw new FatalException(`invalid ${CONFIG_FILE_NAME_JSON}.`)
        return extConfig;
    }
    catch {
        throw new errors_1.FatalException(`can not assess ${exports.CONFIG_FILE_NAME_JSON}`);
    }
}
exports.loadExtConfig = loadExtConfig;
async function loadAppConfig(rootDir, conf) {
    const assetsDir = defaultAssetsDir(rootDir);
    const manifest = path.join(assetsDir, 'res', 'Manifest.xml');
    try {
        return {
            appId: conf.applicationId,
            assetsDir,
            manifest,
            package: await (0, fs_1.readJSON)(path.join(rootDir, 'package.json')),
            projectName: conf.projectName,
            rootDir,
            manifestExt: conf.manifestExt || '',
        };
    }
    catch {
        throw new errors_1.FatalException('can not Access package.json check it');
    }
}
function determineOS(os) {
    switch (os) {
        case 'darwin':
            return definition_1.OS.Mac;
        case 'win32':
            return definition_1.OS.Windows;
        case 'linux':
            return definition_1.OS.Linux;
    }
    return definition_1.OS.Unknown;
}
async function loadGlobalCliConfig() {
    const exist = (0, fs_1.pathExistsSync)(exports.GLOBAL_CLI_CONFIG_PATH);
    if (exist) {
        const cliConfig = await (0, fs_1.readJSON)(exports.GLOBAL_CLI_CONFIG_PATH);
        if (typeof cliConfig.template === 'object') {
            return Object.assign(provideDefaultGlobalCliConfig(), cliConfig);
        }
    }
    // 생성
    const config = provideDefaultGlobalCliConfig();
    await writeGlobalCliConfig(config);
    return config;
}
exports.loadGlobalCliConfig = loadGlobalCliConfig;
async function writeGlobalCliConfig(config) {
    if (!(await (0, fs_1.pathExists)(exports.GLOBAL_CLI_DATA_PATH)))
        await (0, fs_1.mkdirp)(exports.GLOBAL_CLI_DATA_PATH);
    await (0, fs_1.writeFile)(exports.GLOBAL_CLI_CONFIG_PATH, JSON.stringify(config, null, 2), { encoding: 'utf-8' });
}
exports.writeGlobalCliConfig = writeGlobalCliConfig;
function provideDefaultGlobalCliConfig() {
    return {
        npmRegistryUrl: exports.DEFAULT_NPM_REGISTRY_URL,
        npmClient: 'npm',
        template: {
            mode: 'gitea',
            giteaBaseUrl: exports.DEFAULT_GITEA_URL,
            giteaTemplateOrg: exports.DEFAULT_GITEA_TEMPLATE_ORG,
        },
    };
}
exports.provideDefaultGlobalCliConfig = provideDefaultGlobalCliConfig;
// @deprecate
// export function getRequestConfig(config: CliConfig): any {
//   return {
//     userAgent: `node/superagent/Morpheus CLI ${'cli' in config ? config.cli.package.version : config.package.version}`,
//     disabledTLSCerts: config.disabledTLSCerts,
//   }
// }
