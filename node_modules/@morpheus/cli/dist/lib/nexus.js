"use strict";
// import { error } from '@oclif/core/lib/cli-ux'
// import {
//   CliConfig,
//   SuperAgentRequest,
//   NexusNode,
//   NexusNodeSearchRes,
//   NexusSearch,
//   NexusSearchItem,
//   NexusSearchNpmItem,
//   LibraryMeta,
// } from '../definition'
// import { isSuperAgentError } from '../guards'
// import { createRequest, HttpMethod } from './utils/superagent'
// // const NPM_REPOSITORY_NAME = 'npm'
// const RAW_REPOSITORY_NAME = 'client-project'
// export function createNexusRequest(method: HttpMethod, url: string, config: CliConfig): Promise<{ req: SuperAgentRequest }> {
//   return createRequest(method, `${config.nexusBaseUrl}${url}`, {
//     userAgent: `node/superagent/Morpheus CLI ${config.package.version}`,
//   })
// }
// export type NexusSearchSortOption = '' | 'group' | 'name' | 'version' | 'respository'
// export type DirectionOption = '' | 'desc' | 'asc'
// export interface NexusSearchOption {
//   group: string
//   name: string
//   sort?: NexusSearchSortOption
//   direction?: DirectionOption
// }
// export async function nexusSearchNpm(params: NexusSearchOption, config: CliConfig): Promise<NexusSearch<NexusSearchNpmItem>> {
//   const searchParam = new URLSearchParams({ sort: 'version', direction: 'desc', ...params, repository: config.npmRepository })
//   const { req } = await createNexusRequest('GET', `/service/rest/v1/search?${searchParam.toString()}`, config)
//   try {
//     const ret = await req
//     return ret.body as NexusSearch<NexusSearchNpmItem>
//   } catch (e) {
//     if (isSuperAgentError(e)) {
//       error(e.response.error.message)
//     }
//     throw e
//   }
// }
// export async function nexusSearchRaw(params: NexusSearchOption, config: CliConfig): Promise<NexusSearch<NexusSearchItem>> {
//   const searchParam = new URLSearchParams({ sort: 'version', direction: 'desc', ...params, repository: RAW_REPOSITORY_NAME })
//   const { req } = await createNexusRequest('GET', `/service/rest/v1/search?${searchParam.toString()}`, config)
//   try {
//     const ret = await req
//     return ret.body as NexusSearch<NexusSearchItem>
//   } catch (e) {
//     if (isSuperAgentError(e)) {
//       error(e.response.error.message)
//     }
//     throw e
//   }
// }
// export interface nexusSearchNodeOptions {
//   repositoryName: 'npm' | string
//   node: '@morpheus-template' | '@morpheus' | string
// }
// export async function nexusSearchNode(params: nexusSearchNodeOptions, config: CliConfig): Promise<NexusNode[]> {
//   const searchParam = {
//     action: 'coreui_Browse',
//     method: 'read',
//     data: [{ ...params }],
//     type: 'rpc',
//     tid: 1,
//   }
//   const { req } = await createNexusRequest('POST', `/service/extdirect`, config)
//   req.send(searchParam)
//   try {
//     const ret = (await req).body as NexusNodeSearchRes
//     return ret.result.data
//   } catch (e) {
//     if (isSuperAgentError(e)) {
//       error(e.response.error.message)
//     }
//     throw e
//   }
// }
// export async function nexusLibraryMetaJson(config: CliConfig): Promise<Omit<LibraryMeta, 'name'>[]> {
//   const { req } = await createNexusRequest('GET', '/repository/meta/client/library.json', config)
//   req.send()
//   try {
//     return (await req).body as Omit<LibraryMeta, 'name'>[]
//   } catch (e) {
//     if (isSuperAgentError(e)) {
//       error(e.response.error.message)
//     }
//     throw e
//   }
// }
