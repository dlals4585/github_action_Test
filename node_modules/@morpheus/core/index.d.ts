type MPageActionType = "NEW_SCR" | "NO_HISTORY" | "CLEAR_TOP";
type MPageOrientationType =
  | "DEFAULT"
  | "PORTRAIT"
  | "PORT"
  | "LANDSCAPE"
  | "LAND"
  | "PORTREV"
  | "LANDREV"
  | "ALL";
type MPageAnimationType =
  | "DEFAULT"
  | "NONE"
  | "SLIDE_LEFT"
  | "SLIDE_RIGHT"
  | "SLIDE_TOP"
  | "SLIDE_BOTTOM"
  | "ZOOM_IN"
  | "ZOOM_OUT"
  | "FADE"
  | "MODAL_UP"
  | "MODAL_DOWN";

type MExecuteStatus = "SUCCESS" | "FAIL";
interface MExecuteResult {
  status: MExecuteStatus;
}

interface MPageStack {
  key: string;
  action: string;
  path: string;
  alias: string;
  source: string;
  tabs: Omit<MPageStack, "tabs">;
}

interface MPageEvent {
  action: MPageActionType;
  orient: MPageOrientationType;
  params: any;
  path: string;
  filename: string;
  alias: string;
  browser: string;
  browserVer: string;
  device: {
    os: string;
    osVer: string;
  };
  screenWidth: number;
  screenHeight: number;
  scrollWidth: number;
  scrollHeiht: number;
  stack: MPageStack[];
  tabStack: Record<string, MPageStack>;
  time: number;
}

type MLifecycleHandler = (e: MPageEvent) => void;
type MLifecycleEvent = (handler: MLifecycleHandler) => void;

interface MLifeCycle {
  onReady(handler: MLifecycleHandler): M;
  onHide(handler: MLifecycleHandler): M;
  onRestore(handler: MLifecycleHandler): M;
  onBack(handler: MLifecycleHandler): M;
  onPause(handler: MLifecycleHandler): M;
  onResume(handler: MLifecycleHandler): M;
  onDestroy(handler: MLifecycleHandler): M;
}

type MNavigatorOS =
  | "unknown"
  | "Emulator"
  | "Android"
  | "BlackBerry"
  | "iOS"
  | "Opera"
  | "Windows"
  | "Webos";

interface MNavigator {
  os(): MNavigatorOS;
  os(os: "android" | "ios"): boolean;
  device(): {
    os: MNavigatorOS;
    version: string;
    tablet: boolean;
    mobile: boolean;
  };
  device(os: "android" | "ios"): boolean;
  device(os: "android" | "ios", version: string): boolean;
  browser(): { name: string; version: string };
  browser(name: string, version: string): boolean;
}

interface MPageOptions {
  url: string;
  param?: Record<string, any>;
  actionType?: MPageActionType;
  animation?: MPageAnimationType;
  orientation?: MPageOrientationType;
  delay?: number;
  force?: boolean;
  removeQuery?: boolean;
}

interface MPage {
  info(): MPageEvent;
  info(keyPath: string): any;
  defer(enabled: boolean): void;
  defer(enabled: boolean, time: number): void;
  html(url: string): M;
  html(options: MPageOptions): M;
  html(url: string, options?: Omit<MPageOptions, "url">): M;
  back(options?: {
    param?: Record<string, any>;
    animation?: MPageAnimationType;
  }): M;
  remove(url: string): { status: "SUCCESS" } | { status: "FAIL"; err: string };
  replace(options: { url: string; param?: Record<string, any> }): void;
  replace(url: string, options?: { param?: Record<string, any> }): void;
  activity(options: {
    className: string;
    param?: Record<string, any>;
    actionType?: MPageActionType;
    animation?: MPageAnimationType;
    orientation?: MPageOrientationType;
  });
}

interface MData {
  param(): any;
  param(key: string): any;
  param(key: string, value: any): M;
  param(obj: Record<string, any>): M;
  removeParam(key?: string): M;
  global(): any;
  global(key: string): any;
  global(key: string, value: any): M;
  global(obj: Record<string, any>): M;
  removeGlobal(key?: string): M;
  storage(): any;
  storage(key: string): any;
  storage(key: string, value: any): M;
  storage(obj: Record<string, any>): M;
  removeStorage(key?: string): M;
}

interface MSecurity {
  encrypt(
    source: string
  ): { status: "SUCCESS"; result: string } | { status: "FAIL" };
  decrypt(
    source: string
  ): { status: "SUCCESS"; result: string } | { status: "FAIL" };
}

interface MDeviceInfo {
  uuid: string;
  model: string;
  type: "Phone" | "Tablet";
  os: { name: string; version: string };
  comm: { brand: string; mccmnc: string };
  display: { width: string; height: string };
  support: { telephone: boolean; camera_front: boolean; camera_back: boolean };
}

interface MAppInfo {
  app: { id: string; name: string; version: string; build: string };
  library: {
    license_id: string;
    release_date: string;
    release_version: string;
  };
  // ! CHECK Manifest Defalt Object Type!!
  manifest: Record<string, any>;
  resource: { default_version: string; current_version: string };
  last_update_date: number;
}

interface MInfo {
  version(): {
    core: string;
    addon: Record<string, string>;
    plugin: Record<string, string>;
  };
  memory(): { used: string; free: string; total: string };
  device(): MDeviceInfo;
  device(keyPath: string): any;
  stack(): MPageStack[];
  stack(key: string): undefined | MPageStack;
  app(): MAppInfo;
  app(keyPath: string): any;
}

interface MApps {
  browser(url: string, encoding?: "EUC-KR" | "UTF-8"): void;
  remove(identifier: string): M;
  info(packageName: string):
    | { installed: boolean }
    | {
        installed: boolean;
        version: string;
        name: string;
        display_name: string;
      };
  install(url: string, name: string): M;
  downloadAndInstall(
    url: string,
    appName: string,
    options?: {
      indicator?: boolean;
      timeout?: number;
      onprogress?: (
        total: string,
        current: string,
        remaining: string,
        percentage: string
      ) => void;
    }
  ): M;
  open(scheme: string, param?: string | Recore<string, any>): void;
  store(identifier: string): void;
}

interface MSystem {
  call(number: string): M;
  exit(): void;
  flash(): "ON" | "OFF";
  flash(status: "ON" | "OFF"): M;
  mail(options: {
    to: string[];
    cc?: string[];
    bcc?: string[];
    subject: string;
    contents: string;
  }): M;
  sms(options: { numbers: string[] | string; message: string }): M;
  vibration(time?: string | number): M;
}

type MLogLevel = "ERROR" | "WARN" | "INFO" | "DEBUG" | "VERBOSE";
interface MTool {
  log(options: { message: string; level?: MLogLevel; tag?: string }): M;
  log(message: string, level?: MLogLevel, tag?: string): M;
}

type MExecute = (api:string, ...params?:any)=>any;

interface MCore extends MLifeCycle {
  navigator: MNavigator;
  page: MPage;
  data: MData;
  sec: MSecurity;
  info: MInfo;
  apps: MApps;
  sys: MSystem;
  tool: MTool;
  execute: MExecute;
}

type Morpheus = MCore;
type M = Morpheus;

declare var M: Morpheus;

declare global {
  interface Window {
    M: M;
  }
}
