name: Android CI & Auto Release


on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: Gradle 빌드 캐시
        uses: gradle/gradle-build-action@v2

      - name: Android SDK 캐시
        uses: actions/cache@v3
        with:
          path: |
            ~/.android
            ~/.gradle
          key: android-sdk-${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install SDK Components
        run: |
          yes | sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Grant gradlew permission
        run: chmod +x ./gradlew

      - name: Install GitHub CLI
        run: sudo apt-get update && sudo apt-get install -y gh

      - name: Run Unit Tests
        run: ./gradlew testDebug

      - name: Build Debug APK
        run: ./gradlew :app:assembleDebug

      # ↓↓↓ [release] 커밋에만 아래 4단계 수행 ↓↓↓
      - name: Build Release APK
        if: contains(github.event.head_commit.message, '[release]')
        run: ./gradlew assembleRelease

      - name: Package APK into ZIP
        if: contains(github.event.head_commit.message, '[release]')
        run: |
          mkdir -p release_output
          cp android/app/build/outputs/apk/debug/app-debug.apk release_output/
          cd release_output && zip ../app-release.zip *

      - name: List ZIP
        if: contains(github.event.head_commit.message, '[release]')
        run: ls -al app-${{ github.run_number }}.zip

      #태그 생성
      - name: Set TAG_NAME
        if: contains(github.event.head_commit.message, '[release]')
        run: echo "TAG_NAME=auto-$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV

      #릴리즈 자동화 + 자동 릴리즈를 prerelease로 설정
      - name: GitHub Release with ZIP
        if: contains(github.event.head_commit.message, '[release]')
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: Release ${{ env.TAG_NAME }}
          prerelease: true
          files: app-${{ env.TAG_NAME }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      #최근 3개의 릴리즈만 남기고 태그포함 자동삭제
      - name: Delete Old Auto Releases
        if: contains(github.event.head_commit.message, '[release]')
        uses: dev-drprasad/delete-older-releases@v0.2.0
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}