name: Android CD

on:
  push:
    branches:
      - 'release'
    tags:
      - 'android-v*'
  workflow_dispatch:
    inputs:
      release_track:
        description: 'Play store 트랙 선택'
        required: true
        default: internal
        type: choice
        options:
          - internal
          - beta
          - production

permissions:
  contents: write
  packages: write

jobs:
  release:
    # if 조건 : 수동 릴리즈시에는 릴리즈 브랜치에서만 릴리즈될 수 있도록 +
    # 기본 자동 릴리즈시에는 커밋 메시지가[debug] 인 경우에는 릴리즈되지 않도록 +
    # 태그 기반으로도 릴리즈 될 수 있도록
    if: |
      (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/release')
      || (github.event_name == 'push' && github.ref == 'refs/heads/release' && !contains(github.event.head_commit.message, '[debug]'))
      || startsWith(github.ref, 'refs/tags/')
    name: Build & Deploy Release AAB
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: Grant gradlew permission
        run: chmod +x ./gradlew

      - name: Gradle 빌드 캐시
        uses: gradle/gradle-build-action@v2

      - name: Android SDK 캐시
        uses: actions/cache@v3
        with:
          path: |
            ~/.android
            ~/.gradle
          key: android-sdk-${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install SDK Components
        run: |
          yes | sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      - name: Build Release APK
        run: ./gradlew assembleRelease

      - name: Build AAB
        run: ./gradlew bundleRelease

      - name: Release to GitHub
        uses: softprops/action-gh-release@v1
        with:
          tag_name: auto-${{ github.run_number }}
          name: Release auto-${{ github.run_number }}
          prerelease: true
          files: |
            android/app/build/outputs/apk/release/app-release-unsigned.apk
            android/app/build/outputs/bundle/release/app-release.aab
            output/release.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      #------------------------------------------------------------------------
      - name: Upload APK to AWS S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.S3_BUCKET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-northeast-2
          SOURCE_DIR: android/app/build/outputs/apk/release/
          DEST_DIR: release/apk/
      #------------------------------------------------------------------------
      - name: Generate Presigned URL
        id: presign
        run: |
          URL=$(aws s3 presign s3://dlals4585/release/apk/app-release-unsigned.apk \
            --expires-in 3600)
          echo "url=$URL" >> $GITHUB_OUTPUT
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-northeast-2

      - name: Save Presigned URL to File
        run: |
          echo "${{ steps.presign.outputs.url }}" > presigned_url.txt

#      - name: Upload URL artifact
#        uses: actions/upload-artifact@3b4b0c3e361fd37e6e2db7c13e4bafff4f932d4d
#        with:
#          name: presigned-url
#          path: presigned_url.txt

      - name: Release to GitHub
        uses: softprops/action-gh-release@v1
        with:
          files: |
            presigned_url.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #------------------------------------------------------------------------

      #Fastlane을 사용한 앱 배포 예시 (필요 시 별도 수정)
      # > Fastlane이 Google play developer api를 내부적으로 wrapping해서 사용함
      # > fastlane/Fastlane 파일에 관련 내용 정의됨
      #      - name: Set up Ruby
      #        uses: ruby/setup-ruby@v1
      #        with:
      #          ruby-version: '3.2'
      #
      #      - name: Install Fastlane
      #        run: gem install fastlane
      #
      #      - name: Deploy to Play Store
      #        run: fastlane internal
      #        env:
      #          GOOGLE_PLAY_KEY: ${{ secrets.PLAY_STORE_SERVICE_ACCOUNT_JSON }}
      #          PACKAGE_NAME: ${{ secrets.PACKAGE_NAME }}
      #------------------------------------------------------------------------
      #upload-google-play 사용한 앱 배포 예시 (필요 시 별도 수정)
      # > GitHub Actions용 Play Store 업로드 액션
      #      - name: Upload AAB to Google Play
      #        uses: r0adkll/upload-google-play@v1
      #        with:
      #          serviceAccountJsonPlainText: ${{ secrets.PLAY_STORE_SERVICE_ACCOUNT_JSON }}
      #          packageName: ${{ secrets.PACKAGE_NAME }}
      #          #releaseFiles: android/app/build/outputs/bundle/release/app-release.aab
      #          releaseFiles: '**/release/*.aab'
      #          track: ${{ github.event.inputs.release_track }}
      #          status: completed
      #------------------------------------------------------------------------

      #      #사내 NAS/API 업로드(curl) 예시 (필요 시 별도 수정)
      #      - name: Upload to QA NAS via API
      #        if: contains(github.event.head_commit.message, '[release]')
      #        run: |
      #          curl -X POST https://사내 업로드 주소 \
      #            -H "Authorization: Bearer ${{ secrets.NAS_API_TOKEN }}" \
      #            -F "file=@app-${{ github.run_number }}.zip"
      #------------------------------------------------------------------------
      #      #사내 NAS/API 업로드(scp) 예시 (필요 시 별도 수정)
      #      - name: Upload ZIP to NAS via SCP
      #        if: contains(github.event.head_commit.message, '[release]')
      #        run: |
      #          echo "${{ secrets.NAS_SSH_KEY }}" > id_rsa
      #          chmod 600 id_rsa
      #
      #          scp -i id_rsa -o StrictHostKeyChecking=no \
      #            app-${{ github.run_number }}.zip \
      #            ${{ secrets.NAS_USER }}@${{ secrets.NAS_HOST }}:${{ secrets.NAS_TARGET_PATH }}
      #
      #          rm id_rsa
      #------------------------------------------------------------------------